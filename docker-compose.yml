services:
  redis:
    image: docker.io/bitnami/redis:7.4.2
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - redis_data:/bitnami/redis/data
    networks:
      - mit-network
    ports:
      - "6379"

  mitserver:
    build:
      context: .
    image: "ghcr.io/ksysoev/make-it-public:main"
    restart: unless-stopped
    container_name: mitserver
    ports:
      - "8080" # HTTP server
      - "8081:8081" # Reverse proxy
      - "8082:8082" # API server
    environment:
      - AUTH_REDIS_ADDR=redis:6379
      - AUTH_SALT=${AUTH_SALT:-someRandomSalt}
      - HTTP_PUBLIC_SCHEMA=https
      - HTTP_PUBLIC_DOMAIN=${DOMAIN_NAME:-make-it-public.dev}
      - HTTP_LISTEN=:8080
      - REVERSE_PROXY_LISTEN=:8081
      - REVERSE_PROXY_CERT=/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DOMAIN_NAME}/${DOMAIN_NAME}.crt
      - REVERSE_PROXY_KEY=/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DOMAIN_NAME}/${DOMAIN_NAME}.key
      - API_LISTEN=:8082
      - API_DEFAULT_TOKEN_EXPIRY=3600
      - LOG_LEVEL=info
      - LOG_TEXT=false
    command: ["server", "run", "all" ]
    volumes:
      - caddy_data:/data:ro
    networks:
      - mit-network
    depends_on:
      - redis


  caddy:
    image: ghcr.io/caddybuilds/caddy-cloudflare:2.10-alpine
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - EMAIL=${EMAIL}
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - ./runtime/Caddyfile:/etc/caddy/Caddyfile
      - ./static:/srv
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - mitserver
    networks:
      - mit-network

volumes:
  caddy_data:
  caddy_config:
  redis_data:

networks:
  mit-network:
    external: true
    name: ${NETWORK_NAME:-mit-network}
