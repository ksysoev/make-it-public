// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package api

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	token "github.com/ksysoev/make-it-public/pkg/core/token"
)

// MockAuthRepo is an autogenerated mock type for the AuthRepo type
type MockAuthRepo struct {
	mock.Mock
}

type MockAuthRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepo) EXPECT() *MockAuthRepo_Expecter {
	return &MockAuthRepo_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: ctx, keyId, ttl
func (_m *MockAuthRepo) GenerateToken(ctx context.Context, keyId string, ttl time.Duration) (*token.Token, error) {
	ret := _m.Called(ctx, keyId, ttl)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *token.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (*token.Token, error)); ok {
		return rf(ctx, keyId, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *token.Token); ok {
		r0 = rf(ctx, keyId, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, keyId, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepo_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthRepo_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId string
//   - ttl time.Duration
func (_e *MockAuthRepo_Expecter) GenerateToken(ctx interface{}, keyId interface{}, ttl interface{}) *MockAuthRepo_GenerateToken_Call {
	return &MockAuthRepo_GenerateToken_Call{Call: _e.mock.On("GenerateToken", ctx, keyId, ttl)}
}

func (_c *MockAuthRepo_GenerateToken_Call) Run(run func(ctx context.Context, keyId string, ttl time.Duration)) *MockAuthRepo_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockAuthRepo_GenerateToken_Call) Return(_a0 *token.Token, _a1 error) *MockAuthRepo_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepo_GenerateToken_Call) RunAndReturn(run func(context.Context, string, time.Duration) (*token.Token, error)) *MockAuthRepo_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepo creates a new instance of MockAuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepo {
	mock := &MockAuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
