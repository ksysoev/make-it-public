// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"

	token "github.com/ksysoev/make-it-public/pkg/core/token"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepo is an autogenerated mock type for the AuthRepo type
type MockAuthRepo struct {
	mock.Mock
}

type MockAuthRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepo) EXPECT() *MockAuthRepo_Expecter {
	return &MockAuthRepo_Expecter{mock: &_m.Mock}
}

// DeleteToken provides a mock function with given fields: ctx, tokenID
func (_m *MockAuthRepo) DeleteToken(ctx context.Context, tokenID string) error {
	ret := _m.Called(ctx, tokenID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepo_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockAuthRepo_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenID string
func (_e *MockAuthRepo_Expecter) DeleteToken(ctx interface{}, tokenID interface{}) *MockAuthRepo_DeleteToken_Call {
	return &MockAuthRepo_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, tokenID)}
}

func (_c *MockAuthRepo_DeleteToken_Call) Run(run func(ctx context.Context, tokenID string)) *MockAuthRepo_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepo_DeleteToken_Call) Return(_a0 error) *MockAuthRepo_DeleteToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepo_DeleteToken_Call) RunAndReturn(run func(context.Context, string) error) *MockAuthRepo_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsKeyExists provides a mock function with given fields: ctx, keyID
func (_m *MockAuthRepo) IsKeyExists(ctx context.Context, keyID string) (bool, error) {
	ret := _m.Called(ctx, keyID)

	if len(ret) == 0 {
		panic("no return value specified for IsKeyExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, keyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, keyID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepo_IsKeyExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsKeyExists'
type MockAuthRepo_IsKeyExists_Call struct {
	*mock.Call
}

// IsKeyExists is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
func (_e *MockAuthRepo_Expecter) IsKeyExists(ctx interface{}, keyID interface{}) *MockAuthRepo_IsKeyExists_Call {
	return &MockAuthRepo_IsKeyExists_Call{Call: _e.mock.On("IsKeyExists", ctx, keyID)}
}

func (_c *MockAuthRepo_IsKeyExists_Call) Run(run func(ctx context.Context, keyID string)) *MockAuthRepo_IsKeyExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepo_IsKeyExists_Call) Return(_a0 bool, _a1 error) *MockAuthRepo_IsKeyExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepo_IsKeyExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockAuthRepo_IsKeyExists_Call {
	_c.Call.Return(run)
	return _c
}

// SaveToken provides a mock function with given fields: ctx, t
func (_m *MockAuthRepo) SaveToken(ctx context.Context, t *token.Token) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *token.Token) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepo_SaveToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToken'
type MockAuthRepo_SaveToken_Call struct {
	*mock.Call
}

// SaveToken is a helper method to define mock.On call
//   - ctx context.Context
//   - t *token.Token
func (_e *MockAuthRepo_Expecter) SaveToken(ctx interface{}, t interface{}) *MockAuthRepo_SaveToken_Call {
	return &MockAuthRepo_SaveToken_Call{Call: _e.mock.On("SaveToken", ctx, t)}
}

func (_c *MockAuthRepo_SaveToken_Call) Run(run func(ctx context.Context, t *token.Token)) *MockAuthRepo_SaveToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*token.Token))
	})
	return _c
}

func (_c *MockAuthRepo_SaveToken_Call) Return(_a0 error) *MockAuthRepo_SaveToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepo_SaveToken_Call) RunAndReturn(run func(context.Context, *token.Token) error) *MockAuthRepo_SaveToken_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, keyID, secret
func (_m *MockAuthRepo) Verify(ctx context.Context, keyID string, secret string) (bool, error) {
	ret := _m.Called(ctx, keyID, secret)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, keyID, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, keyID, secret)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, keyID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepo_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockAuthRepo_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
//   - secret string
func (_e *MockAuthRepo_Expecter) Verify(ctx interface{}, keyID interface{}, secret interface{}) *MockAuthRepo_Verify_Call {
	return &MockAuthRepo_Verify_Call{Call: _e.mock.On("Verify", ctx, keyID, secret)}
}

func (_c *MockAuthRepo_Verify_Call) Run(run func(ctx context.Context, keyID string, secret string)) *MockAuthRepo_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthRepo_Verify_Call) Return(_a0 bool, _a1 error) *MockAuthRepo_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepo_Verify_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockAuthRepo_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepo creates a new instance of MockAuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepo {
	mock := &MockAuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
