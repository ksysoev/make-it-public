// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package conn

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRequest is an autogenerated mock type for the Request type
type MockRequest struct {
	mock.Mock
}

type MockRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequest) EXPECT() *MockRequest_Expecter {
	return &MockRequest_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with no fields
func (_m *MockRequest) Cancel() {
	_m.Called()
}

// MockRequest_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockRequest_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Cancel() *MockRequest_Cancel_Call {
	return &MockRequest_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *MockRequest_Cancel_Call) Run(run func()) *MockRequest_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Cancel_Call) Return() *MockRequest_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequest_Cancel_Call) RunAndReturn(run func()) *MockRequest_Cancel_Call {
	_c.Run(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockRequest) ID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockRequest_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockRequest_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockRequest_Expecter) ID() *MockRequest_ID_Call {
	return &MockRequest_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockRequest_ID_Call) Run(run func()) *MockRequest_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_ID_Call) Return(_a0 uuid.UUID) *MockRequest_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_ID_Call) RunAndReturn(run func() uuid.UUID) *MockRequest_ID_Call {
	_c.Call.Return(run)
	return _c
}

// ParentContext provides a mock function with no fields
func (_m *MockRequest) ParentContext() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParentContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockRequest_ParentContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParentContext'
type MockRequest_ParentContext_Call struct {
	*mock.Call
}

// ParentContext is a helper method to define mock.On call
func (_e *MockRequest_Expecter) ParentContext() *MockRequest_ParentContext_Call {
	return &MockRequest_ParentContext_Call{Call: _e.mock.On("ParentContext")}
}

func (_c *MockRequest_ParentContext_Call) Run(run func()) *MockRequest_ParentContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_ParentContext_Call) Return(_a0 context.Context) *MockRequest_ParentContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_ParentContext_Call) RunAndReturn(run func() context.Context) *MockRequest_ParentContext_Call {
	_c.Call.Return(run)
	return _c
}

// SendConn provides a mock function with given fields: ctx, _a1
func (_m *MockRequest) SendConn(ctx context.Context, _a1 net.Conn) {
	_m.Called(ctx, _a1)
}

// MockRequest_SendConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendConn'
type MockRequest_SendConn_Call struct {
	*mock.Call
}

// SendConn is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 net.Conn
func (_e *MockRequest_Expecter) SendConn(ctx interface{}, _a1 interface{}) *MockRequest_SendConn_Call {
	return &MockRequest_SendConn_Call{Call: _e.mock.On("SendConn", ctx, _a1)}
}

func (_c *MockRequest_SendConn_Call) Run(run func(ctx context.Context, _a1 net.Conn)) *MockRequest_SendConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.Conn))
	})
	return _c
}

func (_c *MockRequest_SendConn_Call) Return() *MockRequest_SendConn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequest_SendConn_Call) RunAndReturn(run func(context.Context, net.Conn)) *MockRequest_SendConn_Call {
	_c.Run(run)
	return _c
}

// WaitConn provides a mock function with given fields: ctx
func (_m *MockRequest) WaitConn(ctx context.Context) (net.Conn, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitConn")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (net.Conn, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) net.Conn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequest_WaitConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitConn'
type MockRequest_WaitConn_Call struct {
	*mock.Call
}

// WaitConn is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRequest_Expecter) WaitConn(ctx interface{}) *MockRequest_WaitConn_Call {
	return &MockRequest_WaitConn_Call{Call: _e.mock.On("WaitConn", ctx)}
}

func (_c *MockRequest_WaitConn_Call) Run(run func(ctx context.Context)) *MockRequest_WaitConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRequest_WaitConn_Call) Return(_a0 net.Conn, _a1 error) *MockRequest_WaitConn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequest_WaitConn_Call) RunAndReturn(run func(context.Context) (net.Conn, error)) *MockRequest_WaitConn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequest creates a new instance of MockRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequest {
	mock := &MockRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
