// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package conn

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockServConn is an autogenerated mock type for the ServConn type
type MockServConn struct {
	mock.Mock
}

type MockServConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServConn) EXPECT() *MockServConn_Expecter {
	return &MockServConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockServConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockServConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockServConn_Expecter) Close() *MockServConn_Close_Call {
	return &MockServConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockServConn_Close_Call) Run(run func()) *MockServConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServConn_Close_Call) Return(_a0 error) *MockServConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServConn_Close_Call) RunAndReturn(run func() error) *MockServConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *MockServConn) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockServConn_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockServConn_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockServConn_Expecter) Context() *MockServConn_Context_Call {
	return &MockServConn_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockServConn_Context_Call) Run(run func()) *MockServConn_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServConn_Context_Call) Return(_a0 context.Context) *MockServConn_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServConn_Context_Call) RunAndReturn(run func() context.Context) *MockServConn_Context_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockServConn) ID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockServConn_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockServConn_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockServConn_Expecter) ID() *MockServConn_ID_Call {
	return &MockServConn_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockServConn_ID_Call) Run(run func()) *MockServConn_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServConn_ID_Call) Return(_a0 uuid.UUID) *MockServConn_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServConn_ID_Call) RunAndReturn(run func() uuid.UUID) *MockServConn_ID_Call {
	_c.Call.Return(run)
	return _c
}

// RequestConnection provides a mock function with no fields
func (_m *MockServConn) RequestConnection() (Req, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequestConnection")
	}

	var r0 Req
	var r1 error
	if rf, ok := ret.Get(0).(func() (Req, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Req); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Req)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServConn_RequestConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestConnection'
type MockServConn_RequestConnection_Call struct {
	*mock.Call
}

// RequestConnection is a helper method to define mock.On call
func (_e *MockServConn_Expecter) RequestConnection() *MockServConn_RequestConnection_Call {
	return &MockServConn_RequestConnection_Call{Call: _e.mock.On("RequestConnection")}
}

func (_c *MockServConn_RequestConnection_Call) Run(run func()) *MockServConn_RequestConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServConn_RequestConnection_Call) Return(_a0 Req, _a1 error) *MockServConn_RequestConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServConn_RequestConnection_Call) RunAndReturn(run func() (Req, error)) *MockServConn_RequestConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServConn creates a new instance of MockServConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServConn {
	mock := &MockServConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
