// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package conn

import (
	proto "github.com/ksysoev/revdial/proto"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockserverConn is an autogenerated mock type for the serverConn type
type MockserverConn struct {
	mock.Mock
}

type MockserverConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockserverConn) EXPECT() *MockserverConn_Expecter {
	return &MockserverConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockserverConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockserverConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockserverConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockserverConn_Expecter) Close() *MockserverConn_Close_Call {
	return &MockserverConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockserverConn_Close_Call) Run(run func()) *MockserverConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockserverConn_Close_Call) Return(_a0 error) *MockserverConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockserverConn_Close_Call) RunAndReturn(run func() error) *MockserverConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockserverConn) ID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockserverConn_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockserverConn_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockserverConn_Expecter) ID() *MockserverConn_ID_Call {
	return &MockserverConn_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockserverConn_ID_Call) Run(run func()) *MockserverConn_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockserverConn_ID_Call) Return(_a0 uuid.UUID) *MockserverConn_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockserverConn_ID_Call) RunAndReturn(run func() uuid.UUID) *MockserverConn_ID_Call {
	_c.Call.Return(run)
	return _c
}

// SendConnectCommand provides a mock function with given fields: id
func (_m *MockserverConn) SendConnectCommand(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendConnectCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockserverConn_SendConnectCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendConnectCommand'
type MockserverConn_SendConnectCommand_Call struct {
	*mock.Call
}

// SendConnectCommand is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockserverConn_Expecter) SendConnectCommand(id interface{}) *MockserverConn_SendConnectCommand_Call {
	return &MockserverConn_SendConnectCommand_Call{Call: _e.mock.On("SendConnectCommand", id)}
}

func (_c *MockserverConn_SendConnectCommand_Call) Run(run func(id uuid.UUID)) *MockserverConn_SendConnectCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockserverConn_SendConnectCommand_Call) Return(_a0 error) *MockserverConn_SendConnectCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockserverConn_SendConnectCommand_Call) RunAndReturn(run func(uuid.UUID) error) *MockserverConn_SendConnectCommand_Call {
	_c.Call.Return(run)
	return _c
}

// SendCustomEvent provides a mock function with given fields: name, data
func (_m *MockserverConn) SendCustomEvent(name string, data any) error {
	ret := _m.Called(name, data)

	if len(ret) == 0 {
		panic("no return value specified for SendCustomEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, any) error); ok {
		r0 = rf(name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockserverConn_SendCustomEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCustomEvent'
type MockserverConn_SendCustomEvent_Call struct {
	*mock.Call
}

// SendCustomEvent is a helper method to define mock.On call
//   - name string
//   - data any
func (_e *MockserverConn_Expecter) SendCustomEvent(name interface{}, data interface{}) *MockserverConn_SendCustomEvent_Call {
	return &MockserverConn_SendCustomEvent_Call{Call: _e.mock.On("SendCustomEvent", name, data)}
}

func (_c *MockserverConn_SendCustomEvent_Call) Run(run func(name string, data any)) *MockserverConn_SendCustomEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *MockserverConn_SendCustomEvent_Call) Return(_a0 error) *MockserverConn_SendCustomEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockserverConn_SendCustomEvent_Call) RunAndReturn(run func(string, any) error) *MockserverConn_SendCustomEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendPingCommand provides a mock function with no fields
func (_m *MockserverConn) SendPingCommand() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SendPingCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockserverConn_SendPingCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPingCommand'
type MockserverConn_SendPingCommand_Call struct {
	*mock.Call
}

// SendPingCommand is a helper method to define mock.On call
func (_e *MockserverConn_Expecter) SendPingCommand() *MockserverConn_SendPingCommand_Call {
	return &MockserverConn_SendPingCommand_Call{Call: _e.mock.On("SendPingCommand")}
}

func (_c *MockserverConn_SendPingCommand_Call) Run(run func()) *MockserverConn_SendPingCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockserverConn_SendPingCommand_Call) Return(_a0 error) *MockserverConn_SendPingCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockserverConn_SendPingCommand_Call) RunAndReturn(run func() error) *MockserverConn_SendPingCommand_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with no fields
func (_m *MockserverConn) State() proto.State {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 proto.State
	if rf, ok := ret.Get(0).(func() proto.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(proto.State)
	}

	return r0
}

// MockserverConn_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockserverConn_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *MockserverConn_Expecter) State() *MockserverConn_State_Call {
	return &MockserverConn_State_Call{Call: _e.mock.On("State")}
}

func (_c *MockserverConn_State_Call) Run(run func()) *MockserverConn_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockserverConn_State_Call) Return(_a0 proto.State) *MockserverConn_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockserverConn_State_Call) RunAndReturn(run func() proto.State) *MockserverConn_State_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockserverConn creates a new instance of MockserverConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockserverConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockserverConn {
	mock := &MockserverConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
