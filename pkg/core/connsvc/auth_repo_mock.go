// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package connsvc

import mock "github.com/stretchr/testify/mock"

// MockAuthRepo is an autogenerated mock type for the AuthRepo type
type MockAuthRepo struct {
	mock.Mock
}

type MockAuthRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepo) EXPECT() *MockAuthRepo_Expecter {
	return &MockAuthRepo_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function with given fields: user, pass
func (_m *MockAuthRepo) Verify(user string, pass string) bool {
	ret := _m.Called(user, pass)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(user, pass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuthRepo_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockAuthRepo_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - user string
//   - pass string
func (_e *MockAuthRepo_Expecter) Verify(user interface{}, pass interface{}) *MockAuthRepo_Verify_Call {
	return &MockAuthRepo_Verify_Call{Call: _e.mock.On("Verify", user, pass)}
}

func (_c *MockAuthRepo_Verify_Call) Run(run func(user string, pass string)) *MockAuthRepo_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepo_Verify_Call) Return(_a0 bool) *MockAuthRepo_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepo_Verify_Call) RunAndReturn(run func(string, string) bool) *MockAuthRepo_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepo creates a new instance of MockAuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepo {
	mock := &MockAuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
