// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package edge

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockConnService is an autogenerated mock type for the ConnService type
type MockConnService struct {
	mock.Mock
}

type MockConnService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnService) EXPECT() *MockConnService_Expecter {
	return &MockConnService_Expecter{mock: &_m.Mock}
}

// HandleHTTPConnection provides a mock function with given fields: ctx, keyID, conn, write, clientIP
func (_m *MockConnService) HandleHTTPConnection(ctx context.Context, keyID string, conn net.Conn, write func(net.Conn) error, clientIP string) error {
	ret := _m.Called(ctx, keyID, conn, write, clientIP)

	if len(ret) == 0 {
		panic("no return value specified for HandleHTTPConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, net.Conn, func(net.Conn) error, string) error); ok {
		r0 = rf(ctx, keyID, conn, write, clientIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnService_HandleHTTPConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleHTTPConnection'
type MockConnService_HandleHTTPConnection_Call struct {
	*mock.Call
}

// HandleHTTPConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
//   - conn net.Conn
//   - write func(net.Conn) error
//   - clientIP string
func (_e *MockConnService_Expecter) HandleHTTPConnection(ctx interface{}, keyID interface{}, conn interface{}, write interface{}, clientIP interface{}) *MockConnService_HandleHTTPConnection_Call {
	return &MockConnService_HandleHTTPConnection_Call{Call: _e.mock.On("HandleHTTPConnection", ctx, keyID, conn, write, clientIP)}
}

func (_c *MockConnService_HandleHTTPConnection_Call) Run(run func(ctx context.Context, keyID string, conn net.Conn, write func(net.Conn) error, clientIP string)) *MockConnService_HandleHTTPConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(net.Conn), args[3].(func(net.Conn) error), args[4].(string))
	})
	return _c
}

func (_c *MockConnService_HandleHTTPConnection_Call) Return(_a0 error) *MockConnService_HandleHTTPConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnService_HandleHTTPConnection_Call) RunAndReturn(run func(context.Context, string, net.Conn, func(net.Conn) error, string) error) *MockConnService_HandleHTTPConnection_Call {
	_c.Call.Return(run)
	return _c
}

// SetEndpointGenerator provides a mock function with given fields: generator
func (_m *MockConnService) SetEndpointGenerator(generator func(string) (string, error)) {
	_m.Called(generator)
}

// MockConnService_SetEndpointGenerator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEndpointGenerator'
type MockConnService_SetEndpointGenerator_Call struct {
	*mock.Call
}

// SetEndpointGenerator is a helper method to define mock.On call
//   - generator func(string)(string , error)
func (_e *MockConnService_Expecter) SetEndpointGenerator(generator interface{}) *MockConnService_SetEndpointGenerator_Call {
	return &MockConnService_SetEndpointGenerator_Call{Call: _e.mock.On("SetEndpointGenerator", generator)}
}

func (_c *MockConnService_SetEndpointGenerator_Call) Run(run func(generator func(string) (string, error))) *MockConnService_SetEndpointGenerator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string) (string, error)))
	})
	return _c
}

func (_c *MockConnService_SetEndpointGenerator_Call) Return() *MockConnService_SetEndpointGenerator_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnService_SetEndpointGenerator_Call) RunAndReturn(run func(func(string) (string, error))) *MockConnService_SetEndpointGenerator_Call {
	_c.Run(run)
	return _c
}

// NewMockConnService creates a new instance of MockConnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnService {
	mock := &MockConnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
