// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package revproxy

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockConnService is an autogenerated mock type for the ConnService type
type MockConnService struct {
	mock.Mock
}

type MockConnService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnService) EXPECT() *MockConnService_Expecter {
	return &MockConnService_Expecter{mock: &_m.Mock}
}

// HandleReverseConn provides a mock function with given fields: ctx, conn
func (_m *MockConnService) HandleReverseConn(ctx context.Context, conn net.Conn) error {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for HandleReverseConn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnService_HandleReverseConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleReverseConn'
type MockConnService_HandleReverseConn_Call struct {
	*mock.Call
}

// HandleReverseConn is a helper method to define mock.On call
//   - ctx context.Context
//   - conn net.Conn
func (_e *MockConnService_Expecter) HandleReverseConn(ctx interface{}, conn interface{}) *MockConnService_HandleReverseConn_Call {
	return &MockConnService_HandleReverseConn_Call{Call: _e.mock.On("HandleReverseConn", ctx, conn)}
}

func (_c *MockConnService_HandleReverseConn_Call) Run(run func(ctx context.Context, conn net.Conn)) *MockConnService_HandleReverseConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.Conn))
	})
	return _c
}

func (_c *MockConnService_HandleReverseConn_Call) Return(_a0 error) *MockConnService_HandleReverseConn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnService_HandleReverseConn_Call) RunAndReturn(run func(context.Context, net.Conn) error) *MockConnService_HandleReverseConn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnService creates a new instance of MockConnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnService {
	mock := &MockConnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
